#
# File:         CMakeLists.txt
# Object:       Definitions to create the build environment with cmake
#
# Copyright:    Copyright (c) 2011-2013 Made to Order Software Corp.
#               All Rights Reserved.
#
# http://snapwebsites.org/
# contact@m2osw.com
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

set(LIBTLD_VERSION_MAJOR 1)
set(LIBTLD_VERSION_MINOR 3)
set(LIBTLD_VERSION_PATCH 0)

cmake_minimum_required(VERSION 2.8)
project(libtld)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wshadow")

##
## Include support modules
## (must be included in a project even though it is not made
## specific to that project)
##
if( NOT CMAKE_MODULE_PATH )
    set( CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake )
endif()
include( qt )
SnapIncludeQt4( QtCore QtXml )

##
## TLD library
##
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/tld.h.in ${CMAKE_CURRENT_BINARY_DIR}/tld.h)
include_directories(
    "${PROJECT_BINARY_DIR}"
    "${PROJECT_SOURCE_DIR}"
    ${QT_INCLUDES}
)
add_library(tld SHARED
    tld.c
    tld_data.c
    tld_object.cpp
)
install(
    TARGETS tld
    LIBRARY DESTINATION lib
    COMPONENT runtime
)
install(
    FILES ${CMAKE_CURRENT_BINARY_DIR}/tld.h
    DESTINATION include
    COMPONENT dev
)
install(
    FILES LICENSE.txt
    RENAME copyright
    DESTINATION share/doc/libtld
    COMPONENT runtime
)
install(
    FILES debian/changelog.Debian.gz
    RENAME changelog.Debian.gz
    DESTINATION share/doc/libtld
    COMPONENT runtime
)

##
## TLD static library
##
project(libtld_static)
include_directories(
    "${PROJECT_BINARY_DIR}"
    "${PROJECT_SOURCE_DIR}"
    ${QT_INCLUDES}
)
add_library(tld_static STATIC
    tld.c
    tld_data.c
    tld_object.cpp
)
# We need the -fPIC to use this library as extension of PHP, etc.
set_target_properties(tld_static PROPERTIES COMPILE_FLAGS -fPIC)

install(
    TARGETS tld_static
    ARCHIVE DESTINATION lib
    COMPONENT dev
)

##
## TLD parser
##
project(tld_parser)
include_directories(
    "${CMAKE_BINARY_DIR}"
    "${PROJECT_SOURCE_DIR}/.."
    ${QT_INCLUDES}
)
add_executable(tld_parser
    tld_parser.cpp
)
target_link_libraries(tld_parser
    ${QT_LIBRARIES}
)

##
## TLD data
##
project(tld_data)
add_custom_command(
    OUTPUT tld_data.c
    COMMAND tld_parser ${libtld_SOURCE_DIR}
    DEPENDS tld_parser tld_data.xml
)

##
## Example
##
project(example)
add_executable(example
    example.c
)
target_link_libraries(example
    tld
)

##
## TLD tests
##
# Test the library directly
project(tld_internal_test)
add_executable(${PROJECT_NAME}
    tld_internal_test.c
)
# Test the library as an end user
project(tld_test)
add_executable(${PROJECT_NAME}
    tld_test.c
)
target_link_libraries(${PROJECT_NAME}
    tld
)
# Test the tld_valid_uri() function
project(tld_test_full_uri)
add_executable(${PROJECT_NAME}
    tld_test_full_uri.c
)
target_link_libraries(${PROJECT_NAME}
    tld
)
# Test the C++ tld_object
project(tld_test_object)
add_executable(${PROJECT_NAME}
    tld_test_object.cpp
)
target_link_libraries(${PROJECT_NAME}
    tld
)
# Test TLD names as defined by Mozilla
project(tld_test_tld_names)
add_executable(${PROJECT_NAME}
    tld_test_tld_names.cpp
)
target_link_libraries(${PROJECT_NAME}
    tld
    ${QT_LIBRARIES}
)

##
## Run all the tests
##
project(run_libtld_tests)
add_custom_target(run_libtld_tests
	COMMAND echo "*** tld_internal_test"
	COMMAND tld_internal_test
	COMMAND echo "*** tld_test"
	COMMAND tld_test
	COMMAND echo "*** tld_test_full_uri"
	COMMAND tld_test_full_uri
	COMMAND echo "*** tld_test_object"
	COMMAND tld_test_object
	COMMAND echo "*** tld_test_tld_names"
	COMMAND tld_test_tld_names
	COMMAND echo "*** tld_test_xml.sh"
	COMMAND ./tld_test_xml.sh
	COMMAND echo "*** TLD tests all ran"
	WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
	DEPENDS
		tld_internal_test
		tld_test
		tld_test_full_uri
		tld_test_object
		tld_test_tld_names
)


add_subdirectory( doc )

##
## Packaging
##
set(CPACK_PACKAGE_NAME "libtld")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "libtld -- a C library to extract TLDs in a URI")
set(CPACK_PACKAGE_VENDOR "Made to Order Software Corporation")
set(CPACK_PACKAGE_CONTACT "alexis@m2osw.com")
set(CPACK_RESOURCE_FILE_LICENSE "${libtld_SOURCE_DIR}/LICENSE.txt")
set(CPACK_GENERATOR "TGZ" "DEB")
set(CPACK_SOURCE_GENERATOR "TGZ")
set(CPACK_SOURCE_IGNORE_FILES "/CVS/;/work-files/;/.svn/;.swp$;.*~;cscope.*;/tmp/;*.o;*.so;BUILD;Build;build")
set(CPACK_PACKAGE_VERSION "${LIBTLD_VERSION_MAJOR}.${LIBTLD_VERSION_MINOR}.${LIBTLD_VERSION_PATCH}")
set(CPACK_PACKAGE_VERSION_MAJOR "${LIBTLD_VERSION_MAJOR}")
set(CPACK_PACKAGE_VERSION_MINOR "${LIBTLD_VERSION_MINOR}")
set(CPACK_PACKAGE_VERSION_PATCH "${LIBTLD_VERSION_PATCH}")
set(CPACK_SOURCE_PACKAGE_FILE_NAME "libtld-${LIBTLD_VERSION_MAJOR}.${LIBTLD_VERSION_MINOR}.${LIBTLD_VERSION_PATCH}")
set(CPACK_PACKAGE_EXECUTABLES "libtld.so")
set(CPACK_DEBIAN_PACKAGE_SECTION "libs")
set(CPACK_DEBIAN_PACKAGE_HOMEPAGE "http://snapwebsites.org/project/tld-library-libtld")
# I'm not too sure how we can add this one...
#set(CPACK_DEBIAN_PACKAGE_DEV_DEPENDENCIES "cmake libqt4-dev")
include(CPack)

# vim: ts=4 sw=4 et
