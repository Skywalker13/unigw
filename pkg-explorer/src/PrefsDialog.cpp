//===============================================================================
// Copyright:	Copyright (c) 2013 Made to Order Software Corp.
//
// All Rights Reserved.
//
// The source code in this file ("Source Code") is provided by Made to Order Software Corporation
// to you under the terms of the GNU General Public License, version 2.0
// ("GPL").  Terms of the GPL can be found in doc/GPL-license.txt in this distribution.
// 
// By copying, modifying or distributing this software, you acknowledge
// that you have read and understood your obligations described above,
// and agree to abide by those obligations.
// 
// ALL SOURCE CODE IN THIS DISTRIBUTION IS PROVIDED "AS IS." THE AUTHOR MAKES NO
// WARRANTIES, EXPRESS, IMPLIED OR OTHERWISE, REGARDING ITS ACCURACY,
// COMPLETENESS OR PERFORMANCE.
//===============================================================================

#include "PrefsDialog.h"

#include <QtCore>
#include <QtGui>

#include <libdebpackages/wpkgar.h>

#ifdef WIN32
#undef open
#endif

PrefsDialog::PrefsDialog(QWidget *p)
    : QDialog(p)
{
    setupUi(this);

    QSettings settings;
    const QString root_path = settings.value( "root_path" ).toString();
	f_repositoryRootLineEdit->setText( root_path );
}


PrefsDialog::~PrefsDialog()
{
}


namespace
{
	QString GetDefaultDbRoot()
	{
		return QDesktopServices::storageLocation( QDesktopServices::DataLocation ) + "/WPKG_ROOT";
	}

#if defined(MO_LINUX) || defined(MO_DARWIN)
	QString GetUnameArch()
	{
		QProcess uname;
		uname.start( "uname", QStringList() << "-m" );
		uname.waitForFinished();
		const QString arch = uname.readAll().constData();
		//
        if( arch == "x86_64\n" )
		{
			return "amd64";
		}
		//
		return "i386";
	}
#endif

	QString GetCanonalizedArch()
	{
		QString carch;
#if defined(MO_WINDOWS)
		SYSTEM_INFO si;
		GetNativeSystemInfo( &si  );
		switch( si.wProcessorArchitecture )
		{
			case PROCESSOR_ARCHITECTURE_AMD64:
                carch = "win64-amd64";
				break;

			case PROCESSOR_ARCHITECTURE_INTEL:
				carch =  "win32-i386";
				break;

			default:
				carch = "unknown-unknown";
		}
#elif defined(MO_LINUX)
		carch = QString("linux-%1").arg( GetUnameArch() );
#elif defined(MO_DARWIN)
		carch = QString("darwin-%1").arg( GetUnameArch() );
#else
#	error "Unsupported architecture!"
#endif
		return carch;
	}
}


void PrefsDialog::InitDatabase()
{
    QSettings settings;
    const QString root_path       ( settings.value( "root_path", GetDefaultDbRoot() ).toString() );
    const QString wpkg_admin_path ( QString("%1/var/lib/wpkg").arg(root_path) );
    const QString control_file	  ( QString("%1/core/control").arg(wpkg_admin_path) );

    QFileInfo finfo( QDir::toNativeSeparators( control_file ) );
    if( !finfo.exists() )
    {
        const QString admindir_init_file = 
           QDir::toNativeSeparators(QDesktopServices::storageLocation( QDesktopServices::TempLocation )
                                    + "/admindir_init.txt");
        {
            QFile file( admindir_init_file );
            file.open( QIODevice::WriteOnly | QIODevice::Text );
            QTextStream out( &file );
            out << "# Auto-generated by pkg-explorer; do not modify!\n#\nArchitecture: "
                << GetCanonalizedArch()
                <<"\nMaintainer: Made to Order Software Corporation <contact@m2osw.com>\n";
        }

        QDir rdir;
        rdir.mkpath( QDir::toNativeSeparators(root_path) );

        wpkgar::wpkgar_manager manager;
        const QString database_path( QDir::toNativeSeparators( wpkg_admin_path ) );
        manager.set_database_path( database_path.toStdString() );
        manager.create_database( admindir_init_file.toStdString() );

        settings.setValue( "root_path", root_path );
    }
}


void PrefsDialog::accept()
{
    const QString root_path = f_repositoryRootLineEdit->text();
    QSettings settings;
    settings.setValue( "root_path", root_path );
	InitDatabase();
    QDialog::accept();
}


void PrefsDialog::on_f_repositoryBrowseBtn_clicked()
{
	const QString root_path = QFileDialog::getExistingDirectory( this
							, tr("Select WPKG Database Root")
							, GetDefaultDbRoot()
							, QFileDialog::ShowDirsOnly
							);
    if( !root_path.isEmpty()        )
    {
		f_repositoryRootLineEdit->setText( root_path );
	}
}

void PrefsDialog::on_f_buttonBox_clicked(QAbstractButton *button)
{
    QAbstractButton* defaultsBtn =
		static_cast<QAbstractButton*>( f_buttonBox->button( QDialogButtonBox::RestoreDefaults ) );
	if( button == defaultsBtn )
	{
		f_repositoryRootLineEdit->setText( GetDefaultDbRoot() );
	}
}

// vim: ts=4 sw=4 noet
